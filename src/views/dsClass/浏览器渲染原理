1.浏览器如何渲染页面

当浏览器的网络线程收到 HTML 文档后,会产生一个渲染任务,并将其传递给渲染主线程的消息队列。
在事件循环机制的作用下,渲染主线程取出消息队列中的渲染任务,开启渲染流程。
整个渲染流程分为多个阶段,分别是: HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画
15年个阶段都有明确的输入输出,上一个阶段的输出会成为下一个阶段的输入。
这样,整个渲染流程就形成了一套组织严密的生产流水线。

渲染的第一步是解析
function render(html){
    return pixels
}
解析过程中遇到 CSS 解析 CSS,遇到 JS 执行 JS。为了提高解析效率,浏览器在开始解析前,会启动一个预解析的线程,率先下载HTML中的外部CSS 文件和外部的JS 文件。
如果主线程解析到 link 位置,此时外部的 CSS 文件还没有下载解析好,主线程不会等待,继续解析后续的HTML,这是因为下载和解析 CSS的工作是在预解析线程中进行的。这就是CSS不会阴塞 HTM,解析的根本
原因。
解析到 script 位置,会停止解析 HTML,转而等待 JS 文件下载好,并将解析后,才能继续解析 HTML。这是因为JS 代码的执行过程可能会修改当前的DOM 树,所以 DOM 树的生成必



解析HTML = css object model  DOM

dom树 => layout树

内容必须在行盒中
行盒和块盒不能相邻  

分层: 主线程会使用一套复杂策略对整个布局树进行分层,分层好处将来一层改变,仅对该层进行后续处理,从而提升性能
       分层影响效率 可以添加 .container {
            will-change: '提醒浏览器样式修改,浏览器决定是否分层'
        }

绘制: 先生成绘制指令,用于描述下一步如何绘制 (canvas浏览器内置绘制)


渲染主线程 => parse => style => layout => layer => paint

其他线程 => 后续步骤

分块: 合成线程将每一层分层多个小块进行绘制, 交给多个线程(合成线程)同时进行
光栅化: 将每个块变成位图, 优先处理靠近窗口的块 (GPU) 光栅化结果就是一块一块位图

合成线程拿到每个层,每个块得位图,生成一个[指引(quad)]信息,
指引会标识出每个位图应该画到屏幕得那个位置, 以及会考虑到旋转,缩放等变形
变形发生在合成线程与主线程无关,这就是transform效率高的原因

什么是reflow回流 ? 
本质就是重新计算layout树,
什么是repaint重绘 ? 
重新根据分层信息计算了绘制指令,  改动了可见样式后就需要重新计算,回应发repaint,
由于元素布局信息也数据可见样式,所以reflow 一定会引起repaint